@inject DialogService dialogService

<style>
    .inserir {
        box-shadow: 0 0 0 0;
        border: 0 none;
        outline: 0;
        background-color: rgba(43, 45, 66, .2);
        border-radius: 3px;
    }
</style>
<div class="table">
    <div class="row">
        <div class="col-auto">
            <input type="text" class="inserir" @bind="@tarefa.TarefaNome" @bind:event="oninput" @onkeyup="@(async () => { await Atualizar(); })" />
        </div>
    </div>
    <div class="row">
        <div class="col-auto">
            <input type="date" class="inserir" @bind="@tarefa.TarefaDatalimite" @bind:event="oninput" @onkeyup="@(async () => { await Atualizar(); })" />
        </div>

        <div class="col-auto">
            <input type="checkbox" @bind="@tarefa.TarefaEstado" @bind:event="oninput" @onkeyup="@(async () => { await Atualizar(); })" />
        </div>

        <div class="col-auto">
            <input type="number" class="inserir" @bind="@tarefa.UtilizadorIdatribuido" @bind:event="oninput" @onkeyup="@(async () => { await Atualizar(); })" />
        </div>

        <div class="col-auto">
            <RadzenButton Click=@(() =>Alterar()) Text="Alterar"></RadzenButton>
            <RadzenButton Click=@(() => Confirmar()) Text="Deletar" Style="background-color:darkred;"></RadzenButton>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Tarefa tarefa { get; set; } = new Tarefa();

    public async Task Alterar()
    {
        await dialogService.OpenAsync<FormTarefa>("Modificar Tarefa", new Dictionary<string, object> { { "tarefa", tarefa }, { "Sub", true } }, new DialogOptions() { Style = "min-height:auto;min-width:auto;width:auto" });
        StateHasChanged();
    }
    public async Task Confirmar()
    {
        var result = await dialogService.OpenAsync("Simple Dialog", ds =>
    @<div>
        <p Style="margin-bottom: 1rem">Confirm?</p>
        <div class="row">
            <div class="col-md-12">
                <RadzenButton Text="Ok" Click="async () => { await Deletar();ds.Close(true); }" Style="margin-bottom: 10px; width: 150px" />
                <RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Secondary" Style="margin-bottom: 10px; width: 150px" />
            </div>
        </div>
    </div>, new DialogOptions() {Style = "min-height:auto;min-width:auto;width:auto" });
        StateHasChanged();
    }

    public async Task Deletar()
    {
        await apiTarefa.Delete(tarefa.TarefaId);
        StateHasChanged();
    }

    private async Task Atualizar()
    {
        await apiTarefa.PutAsync(tarefa.TarefaId, tarefa);
        StateHasChanged();
    }
}
