@inject DialogService dialogService

<style>
    .inserir {
        box-shadow: 0 0 0 0;
        border: 0 none;
        outline: 0;
        background-color: rgba(43, 45, 66, .2);
        border-radius: 3px;
    }

    .filho {
        padding-right: 20px;
    }

    .draggable {
        border: 1px solid #ccc;
        border-radius: 5px;
        margin: 1rem;
        padding: 1rem;
        display: inline-block;
        cursor: move;
    }
</style>

<DropTarget T="Tarefa" Drop="@(async (data) => await OnDrop(data))">
    @*Drop="@OnDrop"*@
    <div class="drop-target">
        <Draggable Data="@tarefa">
            <div class="draggable">
                <div class="table">
                    <div class="row">
                        <div class="col-auto">
                            <label for="tarefaNome">Nome:</label>
                            <input type="text" id="tarefaNome" class="inserir" @bind="@tarefa.TarefaNome" @bind:event="oninput" @onkeyup="@(async () => { await Atualizar(); })" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-auto">
                            <label for="dataLimite">Entregar:</label>
                            <input id="dataLimite" type="date" class="inserir" @bind="@tarefa.TarefaDatalimite" @bind:event="oninput" @onkeyup="@(async () => { await Atualizar(); })" />
                        </div>

                        <div class="col-auto">
                            <label for="tarefaEstado">Feito:</label>
                            <input id="tarefaEstado" type="checkbox" @bind="@tarefa.TarefaEstado" @bind:event="oninput" @onkeyup="@(async () => { await Atualizar(); })" />
                        </div>

                        <div class="col-auto">
                            <label for="utilizadorIdatribuido">Resposnsavel:</label>
                            <input id="utilizadorIdatribuido" type="number" class="inserir" @bind="@tarefa.UtilizadorIdatribuido" @bind:event="oninput" @onkeyup="@(async () => { await Atualizar(); })" />
                        </div>

                        <div class="col-auto">
                            <RadzenButton Click=@(() =>Alterar()) Text="Alterar" Style="background-color: #DE8A02; "></RadzenButton>
                            <RadzenButton Click=@(() => Confirmar()) Text="Deletar" Style="background-color:darkred;">
                                Deletar
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                                    <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z" />
                                    <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z" />
                                </svg>
                            </RadzenButton>

                            <RadzenButton Click=@(() => AdicionarFilho()) Text="Adicionar filho" Style="background-color:darkred;">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus-square" viewBox="0 0 16 16">
                                    <path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z" />
                                    <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
                                </svg>
                            </RadzenButton>

                            <RadzenButton Click=@(() => MostrarFilho()) Text="Mostrar Filho" Style="background-color:darkred;">
                                @if (renderFilho)
                                {
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-down" viewBox="0 0 16 16">
                                        <path fill-rule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z" />
                                    </svg>
                                }
                                else
                                {
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-up" viewBox="0 0 16 16">
                                        <path fill-rule="evenodd" d="M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z" />
                                    </svg>
                                }
                            </RadzenButton>
                        </div>
                    </div>
                </div>
            </div>
        </Draggable>
    </div>
</DropTarget>

<div class="container filho">
    @if (tarefa.TarefaTemfilho & renderFilho)
    {
        @foreach (Tarefa elemento in filhos)
        {
            <CardTarefa tarefa="elemento"></CardTarefa>
        }
    }
</div>

@code {
    [Parameter]
    public Tarefa tarefa { get; set; } = new Tarefa();
    public Tarefa filho { get; set; } = new Tarefa();
    public List<Tarefa> filhos { get; set; } = new List<Tarefa>();
    private bool renderFilho { get; set; }

    public async Task Alterar()
    {
        await dialogService.OpenAsync<FormTarefa>("Modificar Tarefa", new Dictionary<string, object> { { "tarefa", tarefa }, { "Sub", true } }, new DialogOptions() { Style = "min-height:auto;min-width:auto;width:auto" });
        StateHasChanged();
    }
    public async Task Confirmar()
    {
            var result = await dialogService.OpenAsync("Simple Dialog", ds =>
        @<div>
            <p Style="margin-bottom: 1rem">Confirm?</p>
            <div class="row">
                <div class="col-md-12">
                    <RadzenButton Text="Ok" Click="async () => { await Deletar();ds.Close(true); }" Style="margin-bottom: 10px; width: 150px" />
                    <RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Secondary" Style="margin-bottom: 10px; width: 150px" />
                </div>
            </div>
        </div>, new DialogOptions() { Style = "min-height:auto;min-width:auto;width:auto" });
        StateHasChanged();
    }

    public async Task Deletar()
    {
      await apiTarefa.Delete(tarefa.TarefaId);
      StateHasChanged();
    }

    private async Task Atualizar()
    {
      await apiTarefa.PutAsync(tarefa.TarefaId, tarefa);
      StateHasChanged();
    }

    private async Task AdicionarFilho()
    {
      filho.UtilizadorIdatribuido = tarefa.UtilizadorIdatribuido;
      await dialogService.OpenAsync<FormTarefa>("Adicionar Filho", new Dictionary<string, object> { { "tarefa", filho }, { "Parente", tarefa }, { "Descendente", true } }, new DialogOptions() { Style = "min-height:auto;min-width:auto;width:auto" });
      StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
      if (tarefa.TarefaTemfilho)
          filhos = await apiService.apiTarefa.GetFilho(tarefa.TarefaId);
    }

    private void MostrarFilho()
    {
      if (renderFilho)
          renderFilho = false;
      else
          renderFilho = true;
    }

    public async Task OnDrop(Tarefa data)
    {
      data.ProjetoId = tarefa.ProjetoId;
      await apiService.apiTarefa.InsertAsync(data.TarefaId, tarefa.TarefaPosicao, data);
      // Important: Invoke StateHasChanged() to update the page
      StateHasChanged();
    }
}
