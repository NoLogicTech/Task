@page "/pagetarefa/{id}"
<FormTarefa />
<style>
    .draggable {
        border: 1px solid #ccc;
        border-radius: 5px;
        margin: 1rem;
        padding: 1rem;
        display: inline-block;
        cursor: move;
    }

    .drop-target {
        border: 1px dashed #ebebeb;
        margin: 1rem;
        padding: 1rem;
        display: inline-block;
    }
</style>
@if (temp == null)
{
    <h1>Careegando.......</h1>
}
else
{
    @foreach (Tarefa elemento in temp)
    {
        <Draggable Data="@elemento">
            <div class="draggable">
                <CardTarefa tarefa="@elemento"></CardTarefa>
            </div>
        </Draggable>
    }
}



<DropTarget T="Tarefa">
    @*Drop="@OnDrop"*@
    <div class="drop-target">
        Accepts Draggable A or B
    </div>
</DropTarget>

@if (dropMessage != null)
{
    @dropMessage
}

<DropTarget T="Tarefa" Zone="DropZone">
    <div class="drop-target">
        Can't drop here
    </div>
</DropTarget>
@code{
        public List<Tarefa> temp { get; set; } = new List<Tarefa>();

        [Parameter]
        public string Id { get; set; }

    string dropMessage = null;

    public async void OnDrop(Tarefa data)
    {
        dropMessage = $"Dropped: {data}";
        data.TarefaPosicao += 1;
        await apiTarefa.PutAsync(data.TarefaId, data);
        // Important: Invoke StateHasChanged() to update the page
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        temp = await apiService.apiTarefa.GetForProjectIdAsync(Convert.ToInt32(Id));

        // se existe algum projeto com a mesma chave do contador ela é ordenada
        temp.Sort(delegate (Tarefa p1, Tarefa p2)
        {
            return p1.TarefaPosicao.CompareTo(p2.TarefaPosicao);
        });
    }
}
