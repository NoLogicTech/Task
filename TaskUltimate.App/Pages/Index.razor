@page "/"
<FormTarefa />
<style>
    .draggable {
        border: 1px solid #ccc;
        border-radius: 5px;
        margin: 1rem;
        padding: 1rem;
        display: inline-block;
        cursor: move;
    }

    .drop-target {
        border: 1px dashed #ebebeb;
        margin: 1rem;
        padding: 1rem;
        display: inline-block;
    }
</style>
@if (elementos == null)
{
    <h1>Careegando.......</h1>
}
else
{
    @foreach (List<Tarefa> ListaElemento in listaProjetos.Values)
    {
        @foreach (Tarefa elemento in ListaElemento)
        {
            <Draggable Data="@elemento">
                <div class="draggable">
                    <CardTarefa tarefa="@elemento"></CardTarefa>
                </div>
            </Draggable>
        }
        <p>------------------------------------------------------------------------------------------</p>
    }
}



<DropTarget T="Tarefa">
    @*Drop="@OnDrop"*@
    <div class="drop-target">
        Accepts Draggable A or B
    </div>
</DropTarget>

@if (dropMessage != null)
{
    @dropMessage
}

<DropTarget T="Tarefa" Zone="DropZone">
    <div class="drop-target">
        Can't drop here
    </div>
</DropTarget>
@listaProjetos
@code
{
    public List<Tarefa> elementos { get; set; } = new List<Tarefa>();
    public List<Tarefa> temp { get; set; } = new List<Tarefa>();
    public Dictionary<int, List<Tarefa>> listaProjetos { get; set; } = new Dictionary<int, List<Tarefa>>();

    string dropMessage = null;

    public async void OnDrop(Tarefa data)
    {
        dropMessage = $"Dropped: {data}";
        data.TarefaPosicao += 1;
        await apiTarefa.PutAsync(data.TarefaId, data);
        // Important: Invoke StateHasChanged() to update the page
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        temp = await apiTarefa.GetAsync();

        int cont = 0;
        bool run = true;
        while (run)
        {
            // Ele percorre a lista de tarefas para
            foreach (Tarefa trf2 in temp)
            {
                // encontrar uma tarefa esteja no mesmo projeto que o contador
                if (cont == trf2.ProjetoId)
                {
                    // entao ele adiciona a tarefa ao projeto
                    if (!listaProjetos.ContainsKey(cont))
                        listaProjetos.Add(cont, new List<Tarefa> { trf2 });
                    else
                        listaProjetos[cont].Add(trf2);
                }
            }

            // se existe algum projeto com a mesma chave do contador ela é ordenada
            if (listaProjetos.ContainsKey(cont))
            {
                listaProjetos[cont].Sort(delegate (Tarefa p1, Tarefa p2)
                {
                    return p1.TarefaPosicao.CompareTo(p2.TarefaPosicao);
                });
            }

            cont++;
            if (cont > temp.Count)
            {
                break;
            }
        }
    }
}
