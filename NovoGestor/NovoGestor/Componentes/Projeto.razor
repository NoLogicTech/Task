@page "/projeto"

<style>
    #adicionar {
        display: inline-block;
    }
</style>
<div class="container">
    <div class="row">
        <div class="col-2">
            <h1>Tarefas</h1>
        </div>

        <div class="col-1">
            <!--imagem do ... -->
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-three-dots" viewBox="0 0 16 16">
                <path d="M3 9.5a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm5 0a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm5 0a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3z" />
            </svg>
        </div>

        <div class="col-7"></div>

        <div class="col-2">
            <!--imagem do seta pra sima e pra baixo -->
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-down-up" viewBox="0 0 16 16">
                <path fill-rule="evenodd" d="M11.5 15a.5.5 0 0 0 .5-.5V2.707l3.146 3.147a.5.5 0 0 0 .708-.708l-4-4a.5.5 0 0 0-.708 0l-4 4a.5.5 0 1 0 .708.708L11 2.707V14.5a.5.5 0 0 0 .5.5zm-7-14a.5.5 0 0 1 .5.5v11.793l3.146-3.147a.5.5 0 0 1 .708.708l-4 4a.5.5 0 0 1-.708 0l-4-4a.5.5 0 0 1 .708-.708L4 13.293V1.5a.5.5 0 0 1 .5-.5z" />
            </svg>
        </div>


    </div>

    <div class="row">
        <div class="col-1">
            <!--imagem do + -->
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus-lg" viewBox="0 0 16 16" id="adiconar">
                <path d="M8 0a1 1 0 0 1 1 1v6h6a1 1 0 1 1 0 2H9v6a1 1 0 1 1-2 0V9H1a1 1 0 0 1 0-2h6V1a1 1 0 0 1 1-1z" @onclick="NovaTarefa" />
            </svg>
        </div>
        <div class="col-2">
            <p id="adiconar">adicionar uma tarefa</p>
        </div>
        <div class="col-9"></div>
    </div>
</div>

<!--Formulario para uma nova tarefa-->
<!--lista de tarefas-->
<div class="jobs-container">
    <CascadingValue Value="this">
        @ChildContent
    </CascadingValue>
</div>

@code{
    /*
    List<Tarefa> tarefas;

    protected override async Task OnInitializedAsync()
    {
        tarefas = await apiService.GetTarefaAsync();
    }
    */

    [Parameter] public List<Tarefa> tarefas { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; } // codigo que sera renderizado dentro do componete, nomeadamete outeo codigo html ou outro componete
    [Parameter] public EventCallback<Tarefa> OnTarefaUpdated { get; set; } // evento que é chamado quando a uma tarefa é arrastado para dentro desse container ou projeto

    public Tarefa Payload { get; set; } // tarefa que sera carregada

    public async Task UpdateTarefaAsync(int TarefaTarefasuperiorid)
    {
        /* procura a tarefa que sera carregada*/
        // var task = tarefas.SingleOrDefault(x => x.TarefaId == Payload.TarefaId);
        var task = await apiService.GetTarefaPorIdAsync(Payload.TarefaId);
        Console.WriteLine("tarefa 0");

        /* se a tarefa for encontrada ela sera mudada de tarefa superior*/
        if (task != null)
        {
            Console.WriteLine($"antes: { task.TarefaTarefasuperiorid} { task}");
            task.TarefaTarefasuperiorid = TarefaTarefasuperiorid;
            await OnTarefaUpdated.InvokeAsync(Payload);
            Console.WriteLine($"depois { task.TarefaTarefasuperiorid} { task}");
            await apiService.PutTarefaAsync(task.TarefaId, task);
            Console.WriteLine("tarefa 1");

        }
    }

    public void NovaTarefa() { }


}
