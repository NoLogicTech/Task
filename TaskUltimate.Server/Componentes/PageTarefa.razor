@page "/pagetarefa/{ProjetoId}"
<FormTarefa ProjetoId="Convert.ToInt32(ProjetoId)" />

<style>
    .draggable {
        border: 1px solid #ccc;
        border-radius: 5px;
        margin: 1rem;
        padding: 1rem;
        display: inline-block;
        cursor: move;
    }

    .drop-target {
        border: 1px dashed #ebebeb;
        margin: 1rem;
        padding: 1rem;
        display: inline-block;
    }
</style>
@if (temp == null)
{
    <h1>Careegando.......</h1>
}
else
{
    @foreach (Tarefa elemento in temp)
    {
        <CardTarefa tarefa="@elemento"></CardTarefa>
    }
}

@if (dropMessage != null)
{
    @dropMessage
}

@code{
    public List<Tarefa> temp { get; set; }

    [Parameter]
    public string ProjetoId { get; set; }

    [Parameter]
    public int ParenteId { get; set; }

    string dropMessage = null;

    public async Task OnDrop(Tarefa data)
    {
        dropMessage = $"Dropped: {data}";
        await apiService.apiTarefa.InsertAsync(data.TarefaId, 1, data);
        // Important: Invoke StateHasChanged() to update the page
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        if (ParenteId != 0)
            temp = await apiService.apiTarefa.GetFilho(ParenteId);
        else
            temp = await apiService.apiTarefa.GetParentByProject(Convert.ToInt32(ProjetoId));

        // se existe algum projeto com a mesma chave do contador ela é ordenada
        temp.Sort(delegate (Tarefa p1, Tarefa p2)
        {
            return $"{p1.TarefaPosicao}".CompareTo($"{p2.TarefaPosicao}");
        });
    }
}
